/**
 * @author ngoanh2n
 */

group group
version version

apply plugin: 'java'
apply plugin: 'idea'    // Optional using for IntelliJ IDEA
apply plugin: 'eclipse' // Optional using for Eclipse
apply plugin: "com.github.spacialcircumstances.gradle-cucumber-reporting"

[compileJava, compileTestJava]*.sourceCompatibility = 1.8
[compileJava, compileTestJava]*.targetCompatibility = 1.8
[compileJava, compileTestJava]*.options.collect { options -> options.debug = true }
[compileJava, compileTestJava]*.options.collect { options -> options.encoding = 'UTF-8' }

repositories {
    jcenter()
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

dependencies {
    /*
    * Selenium/Selenide
    */
    // https://mvnrepository.com/artifact/com.codeborne/selenide
    implementation('com.codeborne:selenide:5.6.1')

    // https://mvnrepository.com/artifact/io.appium/java-client
    implementation('io.appium:java-client:7.2.0')

    // https://mvnrepository.com/artifact/com.codeborne/phantomjsdriver
    testImplementation('com.codeborne:phantomjsdriver:1.4.4') { transitive = false }

    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/htmlunit-driver
    testImplementation('org.seleniumhq.selenium:htmlunit-driver:2.36.0')

    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-safari-driver
    testImplementation('org.seleniumhq.selenium:selenium-safari-driver:3.141.59') { transitive = false }

    /*
    * TestNG
    */
    testImplementation('org.testng:testng:7.1.0')

    /*
    * Cucumber
    */
    // https://mvnrepository.com/artifact/io.cucumber/cucumber-java
    implementation('io.cucumber:cucumber-java:5.0.0')

    // https://mvnrepository.com/artifact/io.cucumber/cucumber-testng
    implementation('io.cucumber:cucumber-testng:5.0.0')

    // https://mvnrepository.com/artifact/io.cucumber/cucumber-java8
    implementation('io.cucumber:cucumber-java8:5.0.0')

    // https://mvnrepository.com/artifact/io.cucumber/cucumber-picocontainer
    implementation('io.cucumber:cucumber-picocontainer:5.0.0')

    // https://mvnrepository.com/artifact/com.github.spacialcircumstances/gradle-cucumber-reporting
    implementation('com.github.spacialcircumstances:gradle-cucumber-reporting:0.1.16')

    /*
     * Logging
     */
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation('org.slf4j:slf4j-api:1.7.30')

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12
    testImplementation('org.slf4j:slf4j-log4j12:1.7.30')
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.spacialcircumstances:gradle-cucumber-reporting:0.0.15"
    }
}

tasks.withType(Test).all { testTask ->
    testTask.systemProperties = [
            'file.encoding': 'UTF-8',
            'BUILD_URL'    : System.getenv()['BUILD_URL']
    ]
    testTask.testLogging.showStandardStreams = true
    testTask.exclude 'com.github.ngoanh2n.pages/**/*'
    testTask.outputs.upToDateWhen { false }
}

/*
* Cucumber Reports Configuration
*/
cucumberReports {
    outputDir = file("$buildDir")
    reports = files("$buildDir/cucumber-reports/CucumberTestReport.json")
}

tasks.withType(Test) {
    /*
    * Tell with Gradle that use TestNG framework
    */
    useTestNG() {
        /*
        * Preserving order of TestNG tests
        */
        preserveOrder true

        /*
        * Grouping TestNG tests by instances
        */
        groupByInstances = true

        /*
        * To generate reports by TestNG library
        */
        useDefaultListeners = false

        /*
        * Set TestNG output dir
        */
        outputDirectory = file('build/testngOutput')

        //includeGroups 'unitTests'
        //excludeGroups 'integrationTests'
    }

    /*
    * Make failing tests do not fail the task
    */
    ignoreFailures = true

    /*
    * Turn off Gradle's HTML report to avoid replacing the reports generated by TestNG library
    */
    reports.html.enabled = false

    /*
    * To show standard out and standard error of the test JVM(s) on the console
    */
    testLogging.showStandardStreams = true

    /*
    *  Want to display the following test events
    */
    testLogging { events 'passed', 'skipped', 'failed' }

    /*
    * To make the Gradle JVM system properties available to tests
    */
    systemProperties = System.getProperties() as Map<String, ?>
}
